[
   // Toggle inlay hints
   {
      "key": "ctrl+shift+i", // key to press to activate command
      "command": "settings.cycle", // `settings.cycle` is the command that's actually being run, from the extension `hoovercj.vscode-settings-cycler`
      "when": "editorTextFocus", // this keybinding is only active when (editor is in focus) and (the language is `rust`)
      "args": { // these are the arguments passed to `settings.cycle`
         "id": "toggle-inlay-hints", // must be unique
         "overrideWorkspaceSettings": true,
         "values": [ // Note: use the same settings in each values object
            {
               "editor.inlayHints.enabled": "off" // sets the inlay hints off
            },
            {
               "editor.inlayHints.enabled": "on" // sets the inlay hints on
            }
         ]
      }
   },
   {
      "key": "ctrl+shift+l", // key to press to activate command
      "command": "settings.cycle", // `settings.cycle` is the command that's actually being run, from the extension `hoovercj.vscode-settings-cycler`
      "when": "editorTextFocus", // this keybinding is only active when (editor is in focus) and (the language is `rust`)
      "args": { // these are the arguments passed to `settings.cycle`
         "id": "toggle-error-lens", // must be unique
         "overrideWorkspaceSettings": true,
         "values": [ // Note: use the same settings in each values object
            {
               "errorLens.enabled": false // sets the error lens hints off
            },
            {
               "errorLens.enabled": true // sets the error lens hints on
            }
         ]
      },
   },
   {
      "key": "ctrl+enter",
      "command": "workbench.action.terminal.toggleTerminal",
      "when": "terminal.active"
   },
   {
      "key": "ctrl+m",
      "command": "editor.action.toggleMinimap"
   },
   {
      "key": "tab",
      "command": "selectNextSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
   },
   {
      "key": "shift+tab",
      "command": "selectPrevSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
   },
   {
      "key": "ctrl+j",
      "command": "selectNextSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
   },
   {
      "key": "ctrl+k",
      "command": "selectPrevSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
   },
   {
      "key": "tab",
      "command": "workbench.action.quickOpenNavigateNext",
      "when": "inQuickOpen"
   },
   {
      "key": "shift+tab",
      "command": "workbench.action.quickOpenNavigatePrevious",
      "when": "inQuickOpen"
   },
   {
      "key": "ctrl+j",
      "command": "workbench.action.quickOpenNavigateNext",
      "when": "inQuickOpen"
   },
   {
      "key": "ctrl+k",
      "command": "workbench.action.quickOpenNavigatePrevious",
      "when": "inQuickOpen"
   },
   {
      "command": "vscode-neovim.compositeEscape1",
      "key": "j",
      "when": "neovim.mode == insert && editorTextFocus",
      "args": "j"
   },
   {
      "command": "vscode-neovim.compositeEscape2",
      "key": "k",
      "when": "neovim.mode == insert && editorTextFocus",
      "args": "k"
   },
   {
      "key": "space e",
      "command": "workbench.action.toggleSidebarVisibility",
      "when": "neovim.mode != insert && editorTextFocus"
   },
   {
      "key": "space o",
      "command": "workbench.view.explorer",
      "when": "neovim.mode != insert && editorTextFocus"
   },
   {
      "key": "ctrl+l",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "neovim.mode != insert && !editorTextFocus"
   },
   {
      "key": "ctrl+k",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "terminalFocus"
   },
   {
      "key": "shift+h",
      "command": "workbench.action.previousEditor",
   },
   {
      "key": "shift+l",
      "command": "workbench.action.nextEditor",
   },
   {
      "key": "d",
      "command": "deleteFile",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
   },
   {
      "key": "y",
      "command": "filesExplorer.copy",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
   },
   {
      "key": "x",
      "command": "filesExplorer.cut",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
   },
   {
      "key": "p",
      "command": "filesExplorer.paste",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
   },
   {
      "key": "v",
      "command": "explorer.openToSide",
      "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
   },
   {
      "key": "a",
      "command": "explorer.newFile",
      "when": "filesExplorerFocus && !inputFocus"
   },
   {
      "key": "shift+a",
      "command": "explorer.newFolder",
      "when": "filesExplorerFocus && !inputFocus"
   },
   {
      "key": "space w s",
      "command": "vscode-neovim.send",
      "when": "neovim.mode == normal && editorTextFocus",
      "args": "<leader>w s"
   },
]
